# Copyright (c) 2023-present The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or https://opensource.org/license/mit.

name: CI
on:
  # See: https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#pull_request.
  workflow_dispatch:

env:
  CI_FAILFAST_TEST_LEAVE_DANGLING: 1  # GHA does not care about dangling processes and setting this variable avoids killing the CI script itself on error
  MAKEJOBS: '-j10'

jobs:
  windows-native-dll:
    name: ${{ matrix.job-name }}
    runs-on: [self-hosted, DIGITALIS-PURPU] 

    if: ${{ vars.SKIP_BRANCH_PUSH != 'true' || github.event_name == 'pull_request' }}

    env:
      PYTHONUTF8: 1
      TEST_RUNNER_TIMEOUT_FACTOR: 40

    strategy:
      fail-fast: false
      matrix:
        job-type: [standard, fuzz]
        include:
          - job-type: standard
            generate-options: '-DBUILD_GUI=ON -DWITH_ZMQ=ON -DBUILD_BENCH=ON -DWERROR=ON'
            job-name: 'Windows native, VS 2022'
          - job-type: fuzz
            generate-options: '-DVCPKG_MANIFEST_NO_DEFAULT_FEATURES=ON -DVCPKG_MANIFEST_FEATURES="wallet" -DBUILD_GUI=OFF -DBUILD_FOR_FUZZING=ON -DWERROR=ON'
            job-name: 'Windows native, fuzz, VS 2022'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Developer Command Prompt for Microsoft Visual C++
        # Using microsoft/setup-msbuild is not enough.
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Get tool information
        shell: pwsh
        run: |
          cmake -version | Tee-Object -FilePath "cmake_version"
          Write-Output "---"
          msbuild -version | Tee-Object -FilePath "msbuild_version"
          $env:VCToolsVersion | Tee-Object -FilePath "toolset_version"
          py -3 --version
          Write-Host "PowerShell version $($PSVersionTable.PSVersion.ToString())"
          bash --version

      - name: Using vcpkg with MSBuild
        run: |
          echo "set(VCPKG_BUILD_TYPE release)" >> "${VCPKG_INSTALLATION_ROOT}/triplets/x64-windows.cmake"
          # Workaround for libevent, which requires CMake 3.1 but is incompatible with CMake >= 4.0.
          sed -i '1s/^/set(ENV{CMAKE_POLICY_VERSION_MINIMUM} 3.5)\n/' "${VCPKG_INSTALLATION_ROOT}/scripts/ports.cmake"

      - name: vcpkg tools cache
        uses: actions/cache@v4
        with:
          path: T:/vcpkg/downloads/tools
          key: ${{ github.job }}-vcpkg-tools

      - name: Restore vcpkg binary cache
        uses: actions/cache/restore@v4
        id: vcpkg-binary-cache
        with:
          path: T:/vcpkg/archives
          key: ${{ github.job }}-vcpkg-binary-${{ hashFiles('cmake_version', 'msbuild_version', 'toolset_version', 'vcpkg.json') }}

      - name: Generate build system
        run: |
          cmake -B build --preset vs2022 -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake" ${{ matrix.generate-options }}

      - name: Save vcpkg binary cache
        uses: actions/cache/save@v4
        if: github.event_name != 'pull_request' && steps.vcpkg-binary-cache.outputs.cache-hit != 'true' && matrix.job-type == 'standard'
        with:
          path: T:/vcpkg/archives
          key: ${{ github.job }}-vcpkg-binary-${{ hashFiles('cmake_version', 'msbuild_version', 'toolset_version', 'vcpkg.json') }}

      - name: Build
        working-directory: build
        run: |
          cmake --build . -j $NUMBER_OF_PROCESSORS --config Release

      - name: Get bitcoind manifest
        if: matrix.job-type == 'standard'
        working-directory: build
        run: |
          mt.exe -nologo -inputresource:bin/Release/bitcoind.exe -out:bitcoind.manifest
          cat bitcoind.manifest
          echo
          mt.exe -nologo -inputresource:bin/Release/bitcoind.exe -validate_manifest

      - name: Run test suite
        if: matrix.job-type == 'standard'
        working-directory: build
        env:
          QT_PLUGIN_PATH: '${{ github.workspace }}\build\vcpkg_installed\x64-windows\Qt6\plugins'
        run: |
          ctest --output-on-failure --stop-on-failure -j $NUMBER_OF_PROCESSORS -C Release

