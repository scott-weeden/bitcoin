name: CI

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.event_name != 'pull_request' && github.run_id || github.ref }}
  cancel-in-progress: true

env:
  CI_FAILFAST_TEST_LEAVE_DANGLING: 1
  MAKEJOBS: '-j10'

defaults:
  run:
    shell: bash

jobs:
  windows-native-build:
    name: ${{ matrix.job-name }}
    runs-on: [self-hosted, DIGITALIS-PURPU]
    if: ${{ vars.SKIP_BRANCH_PUSH != 'true' || github.event_name == 'pull_request' }}

    strategy:
      fail-fast: false
      matrix:
        job-type: [standard, fuzz]
        include:
          - job-type: standard
            job-name: 'Windows native, VS 2022'
            generate-options: '-DBUILD_GUI=ON -DWITH_ZMQ=ON -DBUILD_BENCH=ON -DWERROR=ON'
          - job-type: fuzz
            job-name: 'Windows native, fuzz, VS 2022'
            generate-options: >-
              -DVCPKG_MANIFEST_NO_DEFAULT_FEATURES=ON
              -DVCPKG_MANIFEST_FEATURES="wallet"
              -DBUILD_GUI=OFF
              -DBUILD_FOR_FUZZING=ON
              -DWERROR=ON

    env:
      PYTHONUTF8: 1
      TEST_RUNNER_TIMEOUT_FACTOR: 40

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Version Info
        shell: pwsh
        run: |
          cmake -version | Tee-Object cmake_version
          msbuild -version | Tee-Object msbuild_version
          $env:VCToolsVersion | Tee-Object toolset_version
          py -3 --version
          bash --version
          Write-Host "PowerShell $($PSVersionTable.PSVersion)"

      - name: Configure vcpkg
        run: |
          echo "set(VCPKG_BUILD_TYPE release)" >> "${VCPKG_INSTALLATION_ROOT}/triplets/x64-windows.cmake"
          sed -i '1s/^/set(ENV{CMAKE_POLICY_VERSION_MINIMUM} 3.5)\n/' "${VCPKG_INSTALLATION_ROOT}/scripts/ports.cmake"

      - name: Restore vcpkg tool cache
        uses: actions/cache@v4
        with:
          path: T:/vcpkg/downloads/tools
          key: ${{ github.job }}-vcpkg-tools

      - name: Restore vcpkg binary cache
        id: vcpkg-binary-cache
        uses: actions/cache/restore@v4
        with:
          path: T:/vcpkg/archives
          key: ${{ github.job }}-vcpkg-binary-${{ hashFiles('cmake_version', 'msbuild_version', 'toolset_version', 'vcpkg.json') }}

      - name: Generate Build System
        run: >
          cmake -B build --preset vs2022
          -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"
          ${{ matrix.generate-options }}

      - name: Save vcpkg binary cache
        uses: actions/cache/save@v4
        if: github.event_name != 'pull_request' && steps.vcpkg-binary-cache.outputs.cache-hit != 'true' && matrix.job-type == 'standard'
        with:
          path: T:/vcpkg/archives
          key: ${{ github.job }}-vcpkg-binary-${{ hashFiles('cmake_version', 'msbuild_version', 'toolset_version', 'vcpkg.json') }}

      - name: Build
        working-directory: build
        run: cmake --build . -j $NUMBER_OF_PROCESSORS --config Release

      - name: Manifest & Validation
        if: matrix.job-type == 'standard'
        working-directory: build
        run: |
          mt.exe -nologo -inputresource:bin/Release/bitcoind.exe -out:bitcoind.manifest
          cat bitcoind.manifest
          mt.exe -nologo -inputresource:bin/Release/bitcoind.exe -validate_manifest

      - name: Run Unit Tests
        if: matrix.job-type == 'standard'
        working-directory: build
        env:
          QT_PLUGIN_PATH: '${{ github.workspace }}\build\vcpkg_installed\x64-windows\Qt6\plugins'
        run: ctest --output-on-failure --stop-on-failure -j $NUMBER_OF_PROCESSORS -C Release

      - name: Run Functional Tests
        if: matrix.job-type == 'standard'
        working-directory: build
        env:
          BITCOIND: '${{ github.workspace }}\build\bin\Release\bitcoind.exe'
          BITCOINCLI: '${{ github.workspace }}\build\bin\Release\bitcoin-cli.exe'
          BITCOINTX: '${{ github.workspace }}\build\bin\Release\bitcoin-tx.exe'
          BITCOINUTIL: '${{ github.workspace }}\build\bin\Release\bitcoin-util.exe'
          BITCOINWALLET: '${{ github.workspace }}\build\bin\Release\bitcoin-wallet.exe'
          TEST_RUNNER_EXTRA: ${{ github.event_name != 'pull_request' && '--extended' || '' }}
        run: >
          py -3 test/functional/test_runner.py
          --jobs $NUMBER_OF_PROCESSORS --ci --quiet --tmpdirprefix="${RUNNER_TEMP}"
          --combinedlogslen=99999999 --timeout-factor=${TEST_RUNNER_TIMEOUT_FACTOR}
          ${TEST_RUNNER_EXTRA}

      - name: Clone Corpora for Fuzzing
        if: matrix.job-type == 'fuzz'
        run: |
          git clone --depth=1 https://github.com/scott-weeden/qa-assets "${RUNNER_TEMP}/qa-assets"
          cd "${RUNNER_TEMP}/qa-assets"
          git log -1

      - name: Run Fuzz Tests
        if: matrix.job-type == 'fuzz'
        working-directory: build
        env:
          BITCOINFUZZ: '${{ github.workspace }}\build\bin\Release\fuzz.exe'
        run: >
          py -3 test/fuzz/test_runner.py
          --par $NUMBER_OF_PROCESSORS --loglevel DEBUG
          "${RUNNER_TEMP}/qa-assets/fuzz_corpora"

  windows-cross:
    name: 'Linux->Windows cross, no tests'
    runs-on: ubuntu-latest
    if: ${{ vars.SKIP_BRANCH_PUSH != 'true' || github.event_name == 'pull_request' }}
    env:
      FILE_ENV: './ci/test/00_setup_env_win64.sh'
      DANGER_CI_ON_HOST_FOLDERS: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Directories
        run: |
          echo "CCACHE_DIR=${{ runner.temp }}/ccache_dir" >> "$GITHUB_ENV"
          echo "BASE_ROOT_DIR=${{ runner.temp }}" >> "$GITHUB_ENV"
          echo "DEPENDS_DIR=${{ runner.temp }}/depends" >> "$GITHUB_ENV"
          echo "BASE_BUILD_DIR=${{ runner.temp }}/build" >> "$GITHUB_ENV"

      - name: Cache Depends
        uses: actions/cache@v4
        with:
          path: ${{ env.DEPENDS_DIR }}/built
          key: ${{ github.job }}-depends-${{ hashFiles('depends/**', env.FILE_ENV) }}

      - name: Restore Ccache
        id: ccache-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ github.job }}-ccache-${{ github.run_id }}
          restore-keys: ${{ github.job }}-ccache-

      - name: Run CI script
        run: ./ci/test_run_all.sh

      - name: Save Ccache
        uses: actions/cache/save@v4
        if: github.event_name != 'pull_request' && steps.ccache-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ github.job }}-ccache-${{ github.run_id }}

      - name: Upload Executables
        uses: actions/upload-artifact@v4
        with:
          name: x86_64-w64-mingw32-executables-${{ github.run_id }}
          path: |
            ${{ env.BASE_BUILD_DIR }}/bin/*.exe
            ${{ env.BASE_BUILD_DIR }}/src/secp256k1/bin/*.exe
            ${{ env.BASE_BUILD_DIR }}/src/univalue/*.exe
            ${{ env.BASE_BUILD_DIR }}/test/config.ini

  windows-native-test:
    name: 'Windows, test cross-built'
    runs-on: [self-hosted, DIGITALIS-PURPU]
    needs: windows-cross
